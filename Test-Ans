Javascript:

1.)What is your favourite new javascript feature and why?
Ans.
A.) Import and Export from ES6 
Reason :- The export is used when creating JavaScript modules/components/templates to export functions, objects from the module so modules/components/templates can be used by other programs with the import statement
This make work easier and simply
B.) Promises 
Reason:- Promises are used to handle asynchronous operations in JavaScript very easily


2.)Explain an interesting way in which you have used this javascript feature.
Ans.
1.) Used in Redux React to initiate the function to dispatch the React states and Exported them . And Imported those functions as our actions using Dispatch Method. 

export const generateChallan = table => async dispatch => {
  try {
    //console.log(data)
    const res = await axios.put(`/api/bookingEntry/filter/data`, table);
    //console.log(res.data)
    dispatch({ type: GENERATE_CHALLAN, payload: res.data });
  } catch (err) {
    console.error(err.response.data);
  }
};

//Importing a class
import {generateChallan} from 'Challan.js' 


2.) The Same Method generateChallan is used to return a promise by async Calling using await.

3.)Is there any difference between regular function syntax and the shorter arrow function syntax? (Write the answer in your own words)
Ans. 
Yes there syntax differ a bit i.e
Normal function :-
function QWERTY(arrgument) {
	
}
Arrow Function:-
const QWERTY = (arrgument) => {
	
}

4.)What is the difference between ‘myFunctionCall(++foo)’   and  ‘myFunctionCall(foo++)’
Ans. ‘myFunctionCall(++foo)’ this is Pre-Increment function And this is ‘myFunctionCall(foo++)’ Post-Increment Funtion
i.e
Pre increment operator is used to increment variable value by 1 before assigning the value to the variable. 
Post increment operator is used to increment variable value by 1 after assigning the value to the variable.


5.)In your own words, explain what a javascript ‘class’ is and how it differs from a function.
Ans.
JavaScript class is a type of function. Classes are declared with the "class" keyword. We will use class expression syntax to initialize a class.
There is technically no difference , they're both just functions

========================================================

Css:

1.)In your own words, explain css specificity.
Ans.
If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.
Specificity Hierarchy:-Inline styles ,IDs , Classes, attributes and pseudo-classes



2.)In your own words, explain, what is ‘!important’ in css.  Also how does it work?  Are there any special circumstances when using it, where it’s behaviour might not be what you expect?
Ans. !important property in CSS is used to provide more Priority (importance) to that css from other css which is inappropriate.
By placing !important with any css make this works
This might not work sometimes when some css is written after it and also has !important property.


3.)What is your prefered layout system: inline-block, floating + clearing, flex, grid, other?  And why?
Ans.Prefered layout is Flex 
Reason: It allow to set multiple div in a single row with having sma height and width without using many other css which need to be given when using any othe layout.


4.)Are negative margins legal and what do they do (margin: -20px)?
Ans.
No usually we should not use neg margins and (margin: -20px) can be the reason for horizontal scroll on the site.


5.)If a <div/> has no margin or other styling and a <p/> tag inside of it has a margin top of some kind, the margin from the <p/> tag will show up on the div instead (the margin will show above the div not inside of it), why is this?  What are the different things that can be done to prevent it?
Ans.This is because the div is just taking the height of <p> not itself
This can be prevented by clearing the <div> property (Display:inline-block + clear float)

==============================================================

React:

1.)React test step1:

Create a react component that has a <div/> with a border.
Inside this <div/> should be a <span/> that displays the ‘live’ width of the browser window at all times.  Keep in mind that the size of the window could easily be changed by the user and you should reflect this.

Solution:-
import React , {Component} from 'react';

class QWERTY extends Component {
  state = { width: 0, height: 0 };
  render() {
    return <div><span>Window size: {this.state.width} x {this.state.height}</span><div>;
  }
  updateDimensions = () => {
    this.setState({ width: window.innerWidth, height: window.innerHeight });
  };
  componentDidMount() {
    window.addEventListener('resize', this.updateDimensions);
  }
  componentWillUnmount() {
    window.removeEventListener('resize', this.updateDimensions);
  }
}



2.)React test step2:

Inside the <div/> you created in the previous step, add a text input that, as a number is entered into it, uses that number to set the height of the div itself in pixels, live as you update the text field (keypress not change event).
Solution:-
class QWERTY extends Component {
  state = { width: 0, height: 0 };
  handleChange = event => {
	this.setState({ height: event.target.value });
  };
  render() {
    return <div style={this.state.height}><input value={this.height.username} onChange={this.handleChange} /><span>Window size: {this.state.width} x {this.state.height}</span><div>;
  }
  
}

3.)React test step3:

Add the following code to your project root (same project as in step 2, but add the code in the global / window space):  

    Let divHeight;
    window.setDivHeight = (height) => divHeight = height;

Add a HOC for your div component that allows you to set the height of your <div/> component from the previous steps by calling that external function.

If you do not know what a HOC is or how to create one, that is also fine, just mention that in your answer and instead create a parent component that can still do this (allow you to call that function ‘setDivHeight’ in order to set the height of the div manually.

Bare in mind that when the height of the div is forcefully set like this, the text fields value should also update to reflect this and should still carry on working as normal (user can continue to modify its value).

Ans.
function ChangeDimension(WrappedComponent, height) {
  return class extends Component {
    constructor(props) {
      super(props);
      this.handleChange = this.handleChange.bind(this);
      this.state = {
        height: this.props.height
      };
    }
    
    handleChange() {
      this.setState({
        height: this.props.height
      });
    }

    render() {
      return <WrappedComponent data={this.state.data} {...this.props} />;
    }
  };
}


=========================================================

Unit tests:

1.)What technologies do you use to unit test your react components?
Ans.
-Jest
Jest is the official Facebook written library for testing react apps.  The purpose of this is to validate that each unit of the software performs as designed. A unit is the smallest testable part of any software
-Enzyme
The enzyme is a jQuery type framework on top of the react written by Airbnb. The enzyme helps you traverse, assert, and manipulate react components.


2.)Are there any pitfalls associated with this technology that have caused you difficulty in the past?
Ans.
A.)
Pitfalls of JEST
-There are some problems with larger snapshots
-Snapshots don’t tell you what the output should be, they just ensure it hasn’t changed

Pitfalls of Enzyme
- This instead of actually rendering components and calling into the component, shallow just looks at the props that would be applied to the React elements created by the component you're shallowly rendering.


3.)How do you test in your unit tests to see if the correct properties are being passed to child components.
-> In Class Based Components We can Console the Properties by this.props.[properties]
 -> For Function Based Components We can pass the same variable which we initiated to a function components and console the properties



=========================================================

RXjs:


1.)What are the differences between Subject, BehaviorSubject and ReplaySubject?  And in what situation would you use each of these (please provide example scenarios)?
Ans.
BehaviorSubject has the characteristic that it stores the “current” value. This means that you can always directly get the last emitted value from the BehaviorSubject.
The ReplaySubject is comparable to the BehaviorSubject in the way that it can send “old” values to new subscribers


2.)If you have an array of values in a stream and you wish to pipe it such that it will emit the arrays values individually, one by one and wait for them all to be completed before processing another array, how would you do this?  Please provide a code example.
E.g.
[1,2] -> [3,4] -> [5,6,7]
Should produce:
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7

Solution:
const { of, forkJoin , from } = rxjs;
const { map } = rxjs.operators;

let a$ = of([1, 8, 10, 4]);
let b$ = of([3, 5, 43, 0]);
let a = from(a$)
  .subscribe();

let b = from(b$)
  .subscribe();

forkJoin(a, b)
  .pipe(
    map(([a, b]) => [...a, ...b]),
    map(x => x.sort((a, b) => a - b))
  )
  .subscribe(x => {
    console.log('Sorted =>', x);
  });

  result: Sorted => [0,1,3,4,5,8,10,43]


3.)If you have a stream that receives individual values and would like to pipe it such that it builds an array out of these values, emitting the updated array each time a new value is added to it, how would you do this?  Please provide a code example.
E.g.
1 -> 2 -> 3 -> 4
Should produce:
[1] -> [1,2] -> [1,2,3] -> [1,2,3,4]

We can use RxJs observable in this case,

let individual values be const val

const obs = Rx.Observable
      .from(val)
      .concatMap(value => Rx.Observable.of(value))
      .scan((acc, value) => {
        acc.push(value);
        return acc;
      }, []); 


=========================================================
Twilio:


Explain which of the Twilio Api’s you have used.  Also explain how and in what scenarios you have used them.
>> I have used Twilio messaging and voice api. In a project we needed to send message to customers on order confirmation for which we used twilio messaging api. And used voice api for outgoing calls, modify calls in progress, and query metadata about calls.
